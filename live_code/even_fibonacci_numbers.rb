# Even Fibonacci numbers
# Problem 2
# Each new term in the Fibonacci sequence is generated by adding the previous two terms.
# By starting with 1 and 2, the first 10 terms will be:

# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

# By considering the terms in the Fibonacci sequence whose values do not exceed four million,
# find the sum of the even-valued terms.

def get_fibonacci_numbers(number_terms, fibonacci_max_term_value)
  fibonacci_numbers = [1,1]

  i = 0
  fibonacci_next_new_number = 0
  until i == number_terms - 1 || fibonacci_next_new_number > fibonacci_max_term_value
    fibonacci_new_number = fibonacci_numbers[i] + fibonacci_numbers[i+1]
    fibonacci_numbers << fibonacci_new_number
    i += 1
    fibonacci_next_new_number = fibonacci_numbers[i] + fibonacci_numbers[i+1]
  end
  puts "The loop broke after #{i+1} terms for max value term set at #{fibonacci_max_term_value} :"
  return fibonacci_numbers
end

def get_fibonacci_even_numbers(fibonacci_numbers)
  return fibonacci_numbers.reject { |fibonacci_number| fibonacci_number%2 != 0 }
end

def sum_fibonacci_numbers(fibonacci_numbers)
  return fibonacci_numbers.reduce(:+)
end

# APP

puts "Please indicate how many terms you want:"
print ">"
number_terms = gets.chomp.to_i

# puts "Please indicate the max value a term of the suite can take:"
# print ">"
# fibonacci_max_term_value = gets.chomp.to_i

# p fibonacci_numbers = get_fibonacci_numbers(number_terms, fibonacci_max_term_value)

# p fibonacci_even_numbers = get_fibonacci_even_numbers(fibonacci_numbers)

# p sum_fibonacci_even_numbers = sum_fibonacci_numbers(fibonacci_even_numbers)

# def fibonacci(n)
#   fibonacci
# end

def fibonacci(n)
  if n == 0
    1
  elsif n == 1
    1
  else
    fibonacci(n-2) + fibonacci(n-1)
  end
end

# p fibonacci(number_terms)

def fibonacci_sum(n)
  if n == 0
    1
  elsif n == 1
    2
  else
    fibonacci_sum(n - 1) + fibonacci(n)
  end
end

p fibonacci_sum(number_terms)





















